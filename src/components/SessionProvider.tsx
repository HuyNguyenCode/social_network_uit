"use client";

import { useEffect, useState } from "react";

const CHECK_INTERVAL = 1 * 600 * 1000; // 5 ph√∫t ki·ªÉm tra session
const USER_ACTIVE_TIMEOUT = 5 * 600 * 1000; // N·∫øu user kh√¥ng ho·∫°t ƒë·ªông 15 ph√∫t th√¨ kh√¥ng g·ªçi API n·ªØa

export default function SessionProvider() {
  const [lastActivity, setLastActivity] = useState<number | null>(null);
  useEffect(() => {
    setLastActivity(Date.now());
  }, []);

  useEffect(() => {
    setLastActivity(Date.now());

    const checkSession = async () => {
      try {
        const response = await fetch("http://localhost:5108/api/Auth/status", { method: "GET" });
        const data = await response.json();
        console.log("G·ªçi api ƒë·ªÉ chekc status session:", data);
        if (!data.succeeded || !data.result.isAuthenticated) {
          console.log("üî¥ User kh√¥ng ƒëƒÉng nh·∫≠p, redirect v·ªÅ login.");
          window.location.href = "/auth"; // Redirect n·∫øu h·∫øt session
          return;
        }

        const { expiresAt, remainingMinutes } = data.result;
        const expirationTime = new Date(expiresAt).getTime();
        const timeNow = Date.now();

        console.log(`üïí Session c√≤n ${remainingMinutes} ph√∫t`);

        if (remainingMinutes < 1 && lastActivity !== null && timeNow - lastActivity < USER_ACTIVE_TIMEOUT) {
          console.log("üîÑ K√©o d√†i session b·∫±ng c√°ch g·ªçi l·∫°i /api/Auth/status");
          await fetch("http://localhost:5108/api/Auth/status", { method: "GET" }); // Gi√°n ti·∫øp "gia h·∫°n" session
        }
      } catch (error) {
        console.error("L·ªói khi ki·ªÉm tra session:", error);
      }
    };

    // L·∫Øng nghe s·ª± ki·ªán user ho·∫°t ƒë·ªông
    const updateActivity = () => setLastActivity(Date.now());
    window.addEventListener("mousemove", updateActivity);
    window.addEventListener("keydown", updateActivity);
    window.addEventListener("scroll", updateActivity);

    // Ki·ªÉm tra session m·ªói CHECK_INTERVAL
    const interval = setInterval(checkSession, CHECK_INTERVAL);

    return () => {
      clearInterval(interval);
      window.removeEventListener("mousemove", updateActivity);
      window.removeEventListener("keydown", updateActivity);
      window.removeEventListener("scroll", updateActivity);
    };
  }, []);

  return null; // Kh√¥ng hi·ªÉn th·ªã UI component
}
